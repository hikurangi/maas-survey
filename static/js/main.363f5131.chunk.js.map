{"version":3,"sources":["data/index.js","components/Description.js","components/Header.js","components/Question.js","components/Result.js","components/Survey.js","components/Layout.js","App.js","registerServiceWorker.js","index.js"],"names":["scale","questions","Description","Box","List","component","map","item","idx","ListItem","key","Header","alt","src","Question","handleChange","index","name","value","display","flexDirection","FormControl","RadioGroup","onChange","defaultValue","row","array","displayIndex","label","FormControlLabel","control","Radio","labelPlacement","Result","answers","liveScore","reduce","a","b","length","formattedScore","Math","floor","toFixed","Survey","useState","state","setState","e","console","log","targetName","target","targetValue","parseInt","Object","values","Layout","mt","mb","Container","maxWidth","App","Fragment","CssBaseline","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","catch","error","ReactDOM","render","document","getElementById","URL","process","origin","addEventListener","fetch","response","status","headers","get","indexOf","ready","unregister","reload","checkValidServiceWorker","registerServiceWorker"],"mappings":"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","file":"static/js/main.363f5131.chunk.js","sourcesContent":["const scale = [\n  'Almost Always',\n  'Very Frequently',\n  'Somewhat Frequently',\n  'Somewhat Infrequently',\n  'Very Infrequently',\n  'Almost Never'\n]\n\nconst questions = [\n  'I could be experiencing some emotion and not be conscious of it until some time later.',\n  'I break or spill things because of carelessness, not paying attention, or thinking of something else.',\n  'I find it difficult to stay focused on what\\'s happening in the present.',\n  'I tend to walk quickly to get where I\\'m going without paying attention to what I experience along the way.',\n  'I tend not to notice feelings of physical tension or discomfort until they really grab my attention.',\n  'I forget a person\\'s name almost as soon as I\\'ve been told it for the first time.',\n  'It seems I am \"running on automatic,\" without much awareness of what I\\'m doing.',\n  'I rush through activities without being really attentive to them.',\n  'I get so focused on the goal I want to achieve that I lose touch with what I\\'m doing right now to get there.',\n  'I do jobs or tasks automatically, without being aware of what I\\'m doing.',\n  'I find myself listening to someone with one ear, doing something else at the same time.',\n  'I drive places on \"automatic pilot\" and then wonder why I went there.',\n  'I find myself preoccupied with the future or the past.',\n  'I find myself doing things without paying attention.',\n  'I snack without being aware that I\\'m eating.'\n]\n\nexport { scale, questions }","import {\n  Box,\n  List,\n  ListItem\n}                from '@material-ui/core'\nimport React     from 'react'\nimport { scale } from '../data'\n\nconst Description = () => (\n  <Box>\n    <h3>Description</h3>\n    <p>\n      The MAAS is a 15-item scale designed to assess a core characteristic of dispositional mindfulness, namely, open or receptive awareness of and attention to what is taking place in the present. The scale shows strong psychometric properties and has been validated with college, community, and cancer patient samples. Correlational, quasi-experimental, and laboratory studies have shown that the MAAS taps a unique quality of consciousness that is related to, and predictive of, a variety of self-regulation and well-being constructs. The measure takes 10 minutes or less to complete.\n    </p>\n    <h3>Instructions</h3>\n    <p>\n       Below is a collection of statements about your everyday experience. Using the 1-6 scale below, please indicate how frequently or infrequently you currently have each experience. Please answer according to what really reflects your experience rather than what you think your experience should be. Please treat each item separately from every other item.\n    </p>\n    <List component='ol'>\n      {\n        scale.map((item, idx) => (\n          <ListItem key={idx}>\n            {\n              // @material-ui doesn't seem to let us make normal numbered lists, so here's an ugly manual approach\n              (idx + 1)\n                + '. '\n                + item\n            }\n          </ListItem>\n        ))\n      }\n    </List>\n  </Box>\n)\n\nexport default Description","import Box   from '@material-ui/core/Box'\nimport React from 'react'\n\nconst Header = () => (\n  <Box component='header'>\n    <img alt=\"Ovio\" src=\"http://ovio.co.nz/wp-content/uploads/2016/09/ovio-logo.png\"/>\n    <h1>Mindful Attention Awareness Scale</h1>\n    <h3>created by Kirk Warren Brown, PhD & Richard M. Ryan, PhD</h3>\n  </Box>\n)\n\nexport default Header","import {\n  Box,\n  FormControl,\n  FormControlLabel,\n  Radio,\n  RadioGroup,\n}                from '@material-ui/core'\nimport React     from 'react'\n\nimport { scale } from '../data'\n\nconst Question = ({\n  handleChange,\n  index,\n  item,\n  name,\n  value,\n}) => (\n  <li key={index}>\n    <p>{item}</p>\n    <Box display=\"flex\" flexDirection=\"row\">\n      <p>{'Almost Always'}</p>\n      <FormControl component='fieldset'>\n        <RadioGroup\n          name={name}\n          onChange={handleChange}\n          defaultValue={''}\n          value={value}\n          row\n        >\n          {\n            scale.map((item, index, array) => {\n    \n              const displayIndex = index + 1\n              const label        = displayIndex + '.'\n              \n              return (\n                <FormControlLabel\n                  key={index}\n                  value={displayIndex}\n                  control={<Radio/>}\n                  label={label}\n                  labelPlacement={'start'}\n                />\n              )\n            })\n          }\n        </RadioGroup>\n      </FormControl>\n      <p>{'Almost Never'}</p>\n    </Box>\n  </li>\n)\n\nexport default Question","import React         from 'react'\r\nimport { questions } from '../data'\r\n\r\nconst Result = ({ answers }) => {\r\n  \r\n  const liveScore      = answers.reduce((a, b) => a + b, 0) / answers.length\r\n  \r\n  // if score is a whole integer\r\n  const formattedScore = Math.floor(liveScore) === liveScore\r\n    ? liveScore // just print it\r\n    : liveScore.toFixed(2) // otherwise round nicely for presentation\r\n\r\n  return answers.length === questions.length\r\n    ? <h1>Your MAAS Score is {formattedScore}</h1>\r\n    : null\r\n\r\n}\r\n\r\nexport default Result\r\n","import { Box }             from '@material-ui/core'\r\nimport React, { useState } from 'react'\r\nimport { questions }       from '../data'\r\nimport Question            from './Question'\r\nimport Result              from './Result'\r\n\r\nconst Survey = () => {\r\n\r\n  const [state, setState] = useState({})\r\n\r\n  function handleChange (e) {\r\n    console.log({targetName: e.target.name, targetValue: e.target.value})\r\n    setState({\r\n      ...state,\r\n      [e.target.name]: parseInt(e.target.value, 10)\r\n    })\r\n  }\r\n\r\n  const answers = Object.values(state)\r\n  console.log({state, answers})\r\n\r\n  return (\r\n    <Box component='article'>\r\n      <ol>\r\n        {\r\n          questions.map((item, index) => {\r\n            // index just in an array!\r\n            const name = 'scale' + index // TODO: unnecessary\r\n            const value = state[name] || ''\r\n\r\n            return (\r\n              <Question\r\n                item={item}\r\n                index={index}\r\n                value={value}\r\n                name={name}\r\n                handleChange={handleChange}\r\n              />\r\n            )\r\n\r\n          })\r\n        }\r\n      </ol>\r\n      <Result answers={answers} />\r\n    </Box>\r\n  )\r\n}\r\n\r\nexport default Survey","import { Box, Container } from '@material-ui/core'\nimport React              from 'react'\n\nimport Description        from './Description'\nimport Header             from './Header'\nimport Survey             from './Survey'\n\nconst Layout = () => (\n  <Box mt={10} mb={20}>\n    <Container component='main' maxWidth='md'>\n      <Header />\n      <Description />\n      <Survey />\n    </Container>\n  </Box>\n)\n\nexport default Layout","import CssBaseline      from '@material-ui/core/CssBaseline'\nimport React            from 'react'\n\nimport Layout           from './components/Layout'\n\nconst App = () => (\n  <React.Fragment>\n    <CssBaseline />\n    <Layout />\n  </React.Fragment>\n)\n\n\nexport default App","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport default function register() {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Lets check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl);\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log('New content is available; please refresh.');\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React                 from 'react'\nimport ReactDOM              from 'react-dom'\nimport App                   from './App'\nimport registerServiceWorker from './registerServiceWorker'\n\nReactDOM.render(<App />, document.getElementById('root'))\nregisterServiceWorker()\n"],"sourceRoot":""}